var db_1 = require('./db');
function router(app) {
    app.get('/api/profiles/me', function (req, res) {
        console.log('get me', db_1.profiles[0]);
        res.json(db_1.profiles[0]);
    });
    app.get('/api/profiles/current', function (req, res) {
        var tempArr = db_1.profiles.slice(1);
        console.log('get current', tempArr);
        res.json(tempArr);
    });
    app.post('/api/profiles/add', function (req, res) {
        req.body.id = db_1.profiles[db_1.profiles.length - 1].id + 1;
        req.body.image = '/common-assets/generic-avatar.png';
        db_1.profiles.push(req.body);
        console.log('new profile', req.body);
        res.json(req.body);
    });
    app.get('/api/profiles/:id', function (req, res) {
        var profileArr = db_1.profiles.filter(function (value) {
            if (value.id == req.params.id) {
                return true;
            }
            return false;
        });
        if (!profileArr[0]) {
            var error = new Error('Could not find profile');
            return res.status(404).send(error);
        }
        console.log('get profile with id of %s', req.params.id, profileArr[0]);
        res.json(profileArr[0]);
    });
    app.post('/api/profiles/:id/interests', function (req, res) {
        var profileArr = db_1.profiles.filter(function (value) {
            if (value.id == req.params.id) {
                return true;
            }
            return false;
        });
        if (!profileArr[0]) {
            var error = new Error('Could not find profile');
            return res.status(404).send(error);
        }
        var interest;
        if (req.body.interest) {
            interest = req.body.interest;
        }
        else if (req.text) {
            interest = req.text;
        }
        console.log('new interest for profile %s', req.params.id, interest);
        if (req.query.index) {
            profileArr[0].interests[req.query.index] = interest;
        }
        else {
            profileArr[0].interests.push(interest);
        }
        res.json(interest);
    });
    app.delete('/api/profiles/:id/interests', function (req, res) {
        var profileArr = db_1.profiles.filter(function (value) {
            if (value.id == req.params.id) {
                return true;
            }
            return false;
        });
        if (!profileArr[0]) {
            var error = new Error('Could not find profile');
            return res.status(404).send(error);
        }
        console.log('deleting interest from profile %s', req.params.id, req.query.q);
        var profileIndex = db_1.profiles.indexOf(profileArr[0]);
        if (profileIndex !== -1) {
            var interestIndex = db_1.profiles[profileIndex].interests.indexOf(req.query.q);
            db_1.profiles[profileIndex].interests.splice(interestIndex, 1);
        }
        res.json([req.query.interest]);
    });
}
exports.router = router;

//# sourceMappingURL=data:application/json;base64,
