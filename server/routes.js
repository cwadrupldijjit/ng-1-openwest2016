var db_1 = require('./db');
function router(app) {
    app.get('/api/profiles/me', function (req, res) {
        res.json(db_1.profiles[0]);
    });
    app.get('/api/profiles/current', function (req, res) {
        var tempArr = db_1.profiles.slice(1);
        res.json(tempArr);
    });
    app.post('/api/profiles/add', function (req, res) {
        req.body.id = db_1.profiles[db_1.profiles.length - 1].id + 1;
        req.body.image = '/common-assets/generic-avatar.png';
        db_1.profiles.push(req.body);
        res.json(req.body);
    });
    app.get('/api/profiles/:id', function (req, res) {
        var profileArr = db_1.profiles.filter(function (value) {
            if (value.id == req.params.id) {
                return true;
            }
            return false;
        });
        if (!profileArr[0]) {
            var error = new Error('Could not find profile');
            return res.status(404).send(error);
        }
        res.json(profileArr[0]);
    });
    app.post('/api/profiles/:id/interests', function (req, res) {
        var profileArr = db_1.profiles.filter(function (value) {
            if (value.id == req.params.id) {
                return true;
            }
            return false;
        });
        if (!profileArr[0]) {
            var error = new Error('Could not find profile');
            return res.status(404).send(error);
        }
        profileArr[0].interests.push(req.body.interest);
        res.json(req.body);
    });
    app.delete('/api/profiles/:id/interests', function (req, res) {
        var profileArr = db_1.profiles.filter(function (value) {
            if (value.id == req.params.id) {
                return true;
            }
            return false;
        });
        if (!profileArr[0]) {
            var error = new Error('Could not find profile');
            return res.status(404).send(error);
        }
        var profileIndex = db_1.profiles.indexOf(profileArr[0]);
        if (profileIndex !== -1) {
            var interestIndex = db_1.profiles[profileIndex].interests.indexOf(req.body.interest);
        }
        res.json(req.body);
    });
}
exports.router = router;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlcy50cyJdLCJuYW1lcyI6WyJyb3V0ZXIiXSwibWFwcGluZ3MiOiJBQUVBLG1CQUF5QixNQUFNLENBQUMsQ0FBQTtBQUVoQyxnQkFBZ0IsR0FBRztJQUNsQkEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxVQUFDQSxHQUFHQSxFQUFFQSxHQUFHQTtRQUNwQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDdkJBLENBQUNBLENBQUNBLENBQUNBO0lBRUhBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLHVCQUF1QkEsRUFBRUEsVUFBQ0EsR0FBR0EsRUFBRUEsR0FBR0E7UUFDekNBLElBQUlBLE9BQU9BLEdBQUdBLGFBQVFBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBRWhDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtJQUNuQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFSEEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxFQUFFQSxVQUFDQSxHQUFHQSxFQUFFQSxHQUFHQTtRQUN0Q0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsYUFBUUEsQ0FBQ0EsYUFBUUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDbkRBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLG1DQUFtQ0EsQ0FBQ0E7UUFDckRBLGFBQVFBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ3hCQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNwQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFSEEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsbUJBQW1CQSxFQUFFQSxVQUFDQSxHQUFHQSxFQUFFQSxHQUFHQTtRQUNyQ0EsSUFBSUEsVUFBVUEsR0FBR0EsYUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsVUFBQ0EsS0FBS0E7WUFDdENBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLEVBQUVBLElBQUlBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUMvQkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDYkEsQ0FBQ0E7WUFFREEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7UUFDZEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFSEEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDcEJBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLEtBQUtBLENBQUNBLHdCQUF3QkEsQ0FBQ0EsQ0FBQ0E7WUFDaERBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1FBQ3BDQSxDQUFDQTtRQUNEQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUN6QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFSEEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsNkJBQTZCQSxFQUFFQSxVQUFDQSxHQUFHQSxFQUFFQSxHQUFHQTtRQUNoREEsSUFBSUEsVUFBVUEsR0FBR0EsYUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsVUFBQ0EsS0FBS0E7WUFDdENBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLEVBQUVBLElBQUlBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUMvQkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDYkEsQ0FBQ0E7WUFFREEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7UUFDZEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFSEEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDcEJBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLEtBQUtBLENBQUNBLHdCQUF3QkEsQ0FBQ0EsQ0FBQ0E7WUFDaERBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1FBQ3BDQSxDQUFDQTtRQUVEQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUVoREEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDcEJBLENBQUNBLENBQUNBLENBQUNBO0lBRUhBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLDZCQUE2QkEsRUFBRUEsVUFBQ0EsR0FBR0EsRUFBRUEsR0FBR0E7UUFDbERBLElBQUlBLFVBQVVBLEdBQUdBLGFBQVFBLENBQUNBLE1BQU1BLENBQUNBLFVBQUNBLEtBQUtBO1lBQ3RDQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUFFQSxJQUFJQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDL0JBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1lBQ2JBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1FBQ2RBLENBQUNBLENBQUNBLENBQUNBO1FBRUhBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3BCQSxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxLQUFLQSxDQUFDQSx3QkFBd0JBLENBQUNBLENBQUNBO1lBQ2hEQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUNwQ0EsQ0FBQ0E7UUFFREEsSUFBSUEsWUFBWUEsR0FBR0EsYUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDbkRBLEVBQUVBLENBQUNBLENBQUNBLFlBQVlBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3pCQSxJQUFJQSxhQUFhQSxHQUFHQSxhQUFRQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUNqRkEsQ0FBQ0E7UUFFREEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDcEJBLENBQUNBLENBQUNBLENBQUNBO0FBQ0pBLENBQUNBO0FBRVEsY0FBTSxVQUZkO0FBRWlCIiwiZmlsZSI6InJvdXRlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xyXG5cclxuaW1wb3J0IHsgcHJvZmlsZXMgfSBmcm9tICcuL2RiJztcclxuXHJcbmZ1bmN0aW9uIHJvdXRlcihhcHApIHtcclxuXHRhcHAuZ2V0KCcvYXBpL3Byb2ZpbGVzL21lJywgKHJlcSwgcmVzKSA9PiB7XHJcblx0XHRyZXMuanNvbihwcm9maWxlc1swXSk7XHJcblx0fSk7XHRcclxuXHRcclxuXHRhcHAuZ2V0KCcvYXBpL3Byb2ZpbGVzL2N1cnJlbnQnLCAocmVxLCByZXMpID0+IHtcclxuXHRcdGxldCB0ZW1wQXJyID0gcHJvZmlsZXMuc2xpY2UoMSk7XHJcblx0XHRcclxuXHRcdHJlcy5qc29uKHRlbXBBcnIpO1xyXG5cdH0pO1xyXG5cdFxyXG5cdGFwcC5wb3N0KCcvYXBpL3Byb2ZpbGVzL2FkZCcsIChyZXEsIHJlcykgPT4ge1xyXG5cdFx0cmVxLmJvZHkuaWQgPSBwcm9maWxlc1twcm9maWxlcy5sZW5ndGggLSAxXS5pZCArIDE7XHJcblx0XHRyZXEuYm9keS5pbWFnZSA9ICcvY29tbW9uLWFzc2V0cy9nZW5lcmljLWF2YXRhci5wbmcnO1xyXG5cdFx0cHJvZmlsZXMucHVzaChyZXEuYm9keSk7XHJcblx0XHRyZXMuanNvbihyZXEuYm9keSk7XHJcblx0fSk7XHJcblx0XHJcblx0YXBwLmdldCgnL2FwaS9wcm9maWxlcy86aWQnLCAocmVxLCByZXMpID0+IHtcclxuXHRcdGxldCBwcm9maWxlQXJyID0gcHJvZmlsZXMuZmlsdGVyKCh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRpZiAodmFsdWUuaWQgPT0gcmVxLnBhcmFtcy5pZCkge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9KTtcclxuXHRcdFxyXG5cdFx0aWYgKCFwcm9maWxlQXJyWzBdKSB7XHJcblx0XHRcdGxldCBlcnJvciA9IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgcHJvZmlsZScpO1xyXG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDQpLnNlbmQoZXJyb3IpO1xyXG5cdFx0fVxyXG5cdFx0cmVzLmpzb24ocHJvZmlsZUFyclswXSk7XHJcblx0fSk7XHJcblx0XHJcblx0YXBwLnBvc3QoJy9hcGkvcHJvZmlsZXMvOmlkL2ludGVyZXN0cycsIChyZXEsIHJlcykgPT4ge1xyXG5cdFx0bGV0IHByb2ZpbGVBcnIgPSBwcm9maWxlcy5maWx0ZXIoKHZhbHVlKSA9PiB7XHJcblx0XHRcdGlmICh2YWx1ZS5pZCA9PSByZXEucGFyYW1zLmlkKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH0pO1xyXG5cdFx0XHJcblx0XHRpZiAoIXByb2ZpbGVBcnJbMF0pIHtcclxuXHRcdFx0bGV0IGVycm9yID0gbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBwcm9maWxlJyk7XHJcblx0XHRcdHJldHVybiByZXMuc3RhdHVzKDQwNCkuc2VuZChlcnJvcik7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHByb2ZpbGVBcnJbMF0uaW50ZXJlc3RzLnB1c2gocmVxLmJvZHkuaW50ZXJlc3QpO1xyXG5cdFx0XHJcblx0XHRyZXMuanNvbihyZXEuYm9keSk7XHJcblx0fSk7XHJcblx0XHJcblx0YXBwLmRlbGV0ZSgnL2FwaS9wcm9maWxlcy86aWQvaW50ZXJlc3RzJywgKHJlcSwgcmVzKSA9PiB7XHJcblx0XHRsZXQgcHJvZmlsZUFyciA9IHByb2ZpbGVzLmZpbHRlcigodmFsdWUpID0+IHtcclxuXHRcdFx0aWYgKHZhbHVlLmlkID09IHJlcS5wYXJhbXMuaWQpIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fSk7XHJcblx0XHRcclxuXHRcdGlmICghcHJvZmlsZUFyclswXSkge1xyXG5cdFx0XHRsZXQgZXJyb3IgPSBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHByb2ZpbGUnKTtcclxuXHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5zZW5kKGVycm9yKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0bGV0IHByb2ZpbGVJbmRleCA9IHByb2ZpbGVzLmluZGV4T2YocHJvZmlsZUFyclswXSk7XHJcblx0XHRpZiAocHJvZmlsZUluZGV4ICE9PSAtMSkge1xyXG5cdFx0XHRsZXQgaW50ZXJlc3RJbmRleCA9IHByb2ZpbGVzW3Byb2ZpbGVJbmRleF0uaW50ZXJlc3RzLmluZGV4T2YocmVxLmJvZHkuaW50ZXJlc3QpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRyZXMuanNvbihyZXEuYm9keSk7XHJcblx0fSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IHJvdXRlciB9OyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
